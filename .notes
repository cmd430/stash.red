#KEY
  [ ] TODO
  [!] IN PROGRESS
  [√] COMPLETE
  [x] CANT/WONT DO


-= Things needed for Feature parity with stash =-
  [ ] Album downloading
      -> https://www.npmjs.com/package/archiver
        -> example https://medium.com/@abhinavk9757/how-to-zip-multiple-streaming-files-in-nodejs-679a6e9d625f
        -> example (s3 but same idea) https://github.com/andychukse/s3downloadzip/blob/master/index.js
  [ ] File downloading
  [ ] Album file uploading / add files to existing album
  [ ] Album title renaming
  [ ] File deleting
  [ ] Album deleting
  [√] upload TTL
  [√] upload is private
  [√] upload dont form album
  [√] upload text or file from paste
  [√] upload file(s) on drop
  [√] upload file(s) from picker
  [ ] upload, paste URL and fetch content
  [ ] sign up capture (maybe login capture?)

-= Things I want to do =-
  [ ] refactor upload.js to be a bit nicer,
      [ ] use `req.parts()` to read feilds and files seperatly
      [ ] make it so we can handle in album uploads without big hacks
  [√] Go over all the styles to make them less shit
      [√] Seperate styles into each component
      [√] refactor theme to use em units rather than px
      [√] all colors in themes (allow for light/dark)
      [x] have all shared items sizes referenced for easy styling (header height etc)
          -> just used `display: flex` to make life better
  [!] scrap and redo client js
      [!] redo uploading js for dropzone
          -> basically done, need to get url uploads working
             so waiting until i redo upload handling on the server
      [√] redo audio player
      [√] redo video player
      [√] redo text loader
  [√] restyle video and audio players so i can use the default player controls
  [ ] Make homepage tell you you need to login before you can upload
  [ ] Create abstract layer for handling the file buffers so you can choose where to store them
      for example you could send them the AWS S3, Azure Blob Storage, Store them locally or Create
      some other file store
  [ ] Admin page to control settings / see logs
      -> for logs can probably use websocket

-= New things I want to add =-
  [√] Dark mode


-= URL references =-
  - `/f/:id` for files
  - `/f/:id/thumbnail` for files thumbnails
  - `/f/:id.:ext` file direct files
  - `/a/:id` for albums
  - `/a/:id/thumbnail` for albums thumbnails
  - `/u/:username` for users

  ! nginx rewrite for old urls !
  server {
    server_name direct.stash.red;

    location / {
      rewrite ^ $scheme://stash.red/f$request_uri permanent;
    }

    listen 80;
  }
