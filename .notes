#KEY
  [ ] TODO
  [!] IN PROGRESS
  [√] COMPLETE
  [x] CANT/WONT DO


-= Things needed for Feature parity with stash =-
  [√] Album downloading
  [√] File downloading
  [√] Album file uploading / add files to existing album
  [√] Album title renaming
      [√] backend
      [√] frontend
          [√] works
          [√] confirm/cancel modal
          [√] cancel editing without changes
  [√] File deleting
      [√] backend
      [√] frontend
          [√] works
          [√] delete/cancel modal
  [√] Album deleting
      [√] backend
      [√] frontend
          [√] works
          [√] delete/cancel modal
  [√] upload TTL
  [√] upload is private
  [√] upload dont form album
  [√] upload text or file from paste
  [√] upload file(s) on drop
  [√] upload file(s) from picker
  [√] upload, paste URL and fetch content
      [√] frontend
      [√] backend
  [√] sign up capture (maybe login capture?)

-= Things I want to do =-
  [√] optimize by storing file size in bytes in the db so we dont have to ask azure everytime
  [√] stream files to user (and allow range requests) to save memory
  [√] refactor upload.js to be a bit nicer,
      [√] use `req.parts()` to read feilds and files seperatly
      [√] make it so we can handle in album uploads without big hacks
  [√] Go over all the styles to make them less shit
      [√] Seperate styles into each component
      [√] refactor theme to use em units rather than px
      [√] all colors in themes (allow for light/dark)
      [x] have all shared items sizes referenced for easy styling (header height etc)
          -> just used `display: flex` to make life better
      [√] home page styles
      [√] user page styles
      [√] album page styles
      [√] file page styles
      [√] file styles
      [√] error page styles
      [√] login/sign up page styles
      [√] modal styles
          [√] update
          [√] delete
          [√] dropzone/upload
  [√] scrap and redo client js
      [√] redo uploading js for dropzone
          -> basically done, need to get url uploads working
             so waiting until i redo upload handling on the server
      [√] redo audio player
      [√] redo video player
      [√] redo text loader
      [√] album title editing
      [√] album order editing
          [√] frontend
              [√] code
              [√] ui
                  -> maybe add some new buttons to the items (replacing the save/delete buttons)
                     that move the items up/down in the DOM order?
          [√] backend
      [√] album file adding
  [√] restyle video and audio players so i can use the default player controls
  [ ] Make homepage tell you you need to login before you can upload
      -> not 100% sure how to do this, mabe just ignore uploads and hide the dropzone with a
         "you must be logged in to upload" message on the client side since the server will
         already ignore invalid upload attempts
  [√] Create abstract layer for handling the file buffers so you can choose where to store them
      for example you could send them the AWS S3, Azure Blob Storage, Store them locally or Create
      some other file store
      [√] storage adaptor class
          [√] filesystem storage
          [√] azure blob storage
      [√] refactor calls to azureblobstorage to the new `fastify.storage.<method>()` methods
  [!] Create abstract layer for DB access to allow using other dbs
      -> probably just do `fastify.db.<method>()` but maybe could do something
         like `fastify.db.<file|album|user>.<method>()` to make it more clear what you are querying
      -> im thinking basically just do what i did for the storage but for the DB
         so we would have the SQL (or i suppose NoSQL) querries be per interface and just inforce
         the returned data conforms to a set result
      -> mysql/mariadb can both use https://www.npmjs.com/package/mariadb
      -> would have to incur a small speed penalty for better-sqlite3 because we'd have
         to make the calls with await to support async db drivers (basically all others)
         but i think it would be fine
      -> would probably still want to use better-sqlite3 for session/config stores so
         would probably need to split those out into a seperate db (or seperate dbs?)
  [x] Admin page to control settings / see logs
      -> to much work for basically no gain
         would have to modifiy logging to allow it to go to the TTY and also be sent to admins
         IF i decide to revisit this would be better to tell it where logs are stored (from pm2 for example)
         and just stream that to admin somehow
      -> very very rarely need to edit settings and config is also only loaded once at load
         so would be easier to just dit the config and restart
  [ ] Find out why styles are flashing on load
      -> might need to load them in the head based of page rather than in the body from the partials

-= New things I want to add =-
  [√] Dark mode
  [ ] look into seeing if we can process the uploads as streams to improve memory use
      -> maybe upload to temp file to generate thumbnail then delete once done
         -> probably just have a stream to write to temp file (fastify.multipart has a
            built in method for this) and a stream to do the upload
            this should be doable by just adding 2 `.pipe()`s to the upload file stream
            i.e `stream.pipe(toTemp)` `stream.pipe(toStorage)` this would require some minor
            changes to the `StorageInterface#write` methods
         -> might be able to do something with `fluent-ffmpeg` since that seems to support streams
            off the bat, but might also be easier to roll my own
         -> sharp seems to support streaming in and out
      -> mimetype detection will need to be updated to support streams
         -> https://github.com/moshen/wasmagic/blob/master/examples/stream-detection/index.js
  [ ] Add file to file to form album
  [ ] P2P file share with WebRTC, URL -> `/t/:id`
      -> https://github.com/feross/simple-peer
  [ ] Typescript type defs so we get nice Typescript
      -> https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html


-= URL references =-
  - `/f/:id` for files
  - `/f/:id/thumbnail` for files thumbnails
  - `/f/:id.:ext` file direct files
  - `/a/:id` for albums
  - `/a/:id/thumbnail` for albums thumbnails
  - `/u/:username` for users

  ! nginx rewrite for old urls !
  server {
    server_name direct.stash.red;

    location / {
      rewrite ^ $scheme://stash.red/f$request_uri permanent;
    }

    listen 80;
  }
